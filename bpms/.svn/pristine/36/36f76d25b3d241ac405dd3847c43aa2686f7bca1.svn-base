package kr.or.ddit.security.auth.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.enumpkg.ServiceResult;
import kr.or.ddit.exception.CustomException;
import kr.or.ddit.projects.base.service.BaseService;
import kr.or.ddit.security.auth.ReloadableFilterInvocationSecurityMetadataSource;
import kr.or.ddit.security.auth.dao.IAuthorityDAO;
import kr.or.ddit.security.auth.dao.IResourceDAO;
import kr.or.ddit.security.vo.AuthorityVO;
import kr.or.ddit.security.vo.ResourceVO;

@Service
public class SecurityServiceImpl extends BaseService implements ISecurityService {
	
	@Inject
	private ReloadableFilterInvocationSecurityMetadataSource filterInvocationSecurityMetadataSource;

	@Override
	public List<AuthorityVO> retrieveAllAuthorities() {
		return authDAO.selectAllAuthorities();
	}

	@Override
	public List<ResourceVO> retrieveAllResources() {
		return resDAO.selectAllResources();
	}

	@Override
	public List<ResourceVO> retrieveResourceListForAuthority(AuthorityVO authority) {
		return resDAO.selectResourceListForAuthority(authority);
	}

	@Transactional
	@Override
	public ServiceResult updateResourceRole(AuthorityVO authority) {
		int cnt = resDAO.deleteResourceRole(authority);
		String[] resources = authority.getResourceId();
		
		if (resources != null && resources.length > 0) {
			cnt += resDAO.insertResourceRole(authority);
		}
		ServiceResult result = ServiceResult.FAILED;
		if (cnt > 0) {
			result = ServiceResult.OK;
			filterInvocationSecurityMetadataSource.reload(); // 역할별 접근제어 설정이 변경되면, 설정 데이터 캐싱 메타데이터를 리로딩해야 함.
		}
		return result;
	}

	@Override
	public List<AuthorityVO> retrieveTeamAuthorityList() {
		return authDAO.selectTeamAuthorityList();
	}

	@Override
	public AuthorityVO retrieveAuthority(AuthorityVO authorityVO) {
		return authDAO.selectAuthority(authorityVO);
	}

	@Override
	public ServiceResult removeAuthority(AuthorityVO authorityVO) throws DataAccessException, CustomException {
		ServiceResult ret = ServiceResult.OK;
		
//		// 1. 해당권한을 사용하는 구성원이 있는지 검사
//		int cnt = authDAO.isExistAuthority(authorityVO);
//		if(cnt == 0) {
//			// 2. 삭제하려는 권한의 상위권한과 하위권한을 조회
//			AuthorityVO parentRole = authDAO.selectParentRoleAuthority(authorityVO);
//			AuthorityVO childRole = authDAO.selectChildRoleAuthority(authorityVO);
//			
//			if( (parentRole != null && StringUtils.isNotBlank(parentRole.getAuthority()))
//					&& (childRole != null && StringUtils.isNotBlank(childRole.getAuthority())) ) {
//				// 3. 삭제하려는 권한의 상위와 하위간의 계층구조를 형성해줌
//				Map<String, String> authorityMap = new HashMap<String, String>();
//				authorityMap.put("parentRole", parentRole.getAuthority());
//				authorityMap.put("childRole", childRole.getAuthority());
//
//				int insertResult = authDAO.insertRoleHierarchy(authorityMap);
//				if(insertResult > 0) {
//					
//				} else {
//					throw new CustomException();
//				}
//			} 
//		} else {
//			ret = ServiceResult.INUSE;
//		}
		return ret;
	}

	
	
	

}








