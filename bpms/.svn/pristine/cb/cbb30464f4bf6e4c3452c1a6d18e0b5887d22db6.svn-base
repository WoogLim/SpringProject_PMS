<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.projects.project.dao.AdminProjectDAO">

	<!-- 프로젝트 상태 별 조회 -->
	<sql id="statusFrag">
		<if test="searchDetail!=null and searchDetail.code!=null">
			<choose>
				<when test="searchDetail.code eq 1">
					AND C.CODE = 1
				</when>
				<when test="searchDetail.code eq 2">
					AND C.CODE != 1
					AND C.CODE = 2
				</when>
				<when test="searchDetail.code eq 3">
					AND C.CODE != 1
					AND C.CODE = 3
				</when>
				<when test="searchDetail.code eq 4">
					AND C.CODE != 1
					AND C.CODE = 4
				</when>
				<when test="searchDetail.code eq 5">
					AND C.CODE != 1
					AND C.CODE = 5
				</when>
				<otherwise>
					AND C.CODE != 1
				</otherwise>
			</choose>
		</if>
		<if test="searchDetail!=null and searchDetail.code eq null">
			<choose>
				<otherwise>
					AND C.CODE != 1
				</otherwise>
			</choose>
		</if>
	</sql>

	<sql id="dateSortFrag">
		<if test="sortVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(sortVO.sortType)">
			<choose>
				<when test="'date'.equals(sortVO.sortCondition) and 'DESC'.equals(sortVO.sortType)">
					ORDER SIBLINGS BY P.CREATE_DATE DESC
				</when>
				<otherwise>
					ORDER SIBLINGS BY P.CREATE_DATE ASC
				</otherwise>
			</choose>
		</if>
	</sql>
	
	<!-- 프로젝트 이름으로 검색 -->
	<sql id="searchFrag">
		<if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
			<choose>
				<when test="'pro_name'.equals(searchVO.searchType)">
					AND INSTR(P.PRO_NAME, #{searchVO.searchWord}) > 0
				</when>
			</choose>
		</if>
	</sql>

	<select id="selectProjectListCount" parameterType="kr.or.ddit.vo.PagingVO" resultType="int">
		SELECT COUNT(*)
		  FROM PROJECT P LEFT OUTER JOIN CODE C ON (P.GROUP_CODE = C.GROUP_CODE)
	     WHERE P.CODE = C.CODE
	     <include refid="searchFrag"></include>
	     <include refid="statusFrag"></include>
	</select>
	
	<select id="selectProjectList" parameterType="kr.or.ddit.vo.PagingVO" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		SELECT B.*
		  FROM(
		    SELECT A.*, ROWNUM RNUM
		      FROM(
		        SELECT P.PRO_ID, P.PRO_NAME, P.PRO_CONTENT, P.PRO_SHOW
		             , TO_CHAR(P.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE, P.MODIFY_DATE, P.END_DATE
		             , P.GROUP_CODE, P.CODE, P.PRO_PARENT
		             , C.CODE_NAME
		          FROM PROJECT P LEFT OUTER JOIN CODE C ON (P.GROUP_CODE = C.GROUP_CODE)
		         WHERE P.CODE = C.CODE
		         <include refid="searchFrag"></include>
		         <include refid="statusFrag"></include>
		      ) A
		    ) B
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="selectNoPagingProjectList" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		SELECT PROJECT_MANAGER 
			 , PRO_MEMCOUNT
			 , PRO_REQUESTER
		     , PRO_ID 
		     , PRO_NAME
		     , PRO_CONTENT
		     , PRO_SHOW
		     , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE
		     , TO_CHAR(MODIFY_DATE, 'YYYY-MM-DD') MODIFY_DATE
		     , TO_CHAR(END_DATE, 'YYYY-MM-DD') END_DATE
		     , GROUP_CODE
		     , CODE
		     , PRO_PARENT
		  FROM PROJECT
		 WHERE CODE != 1
	</select>
	
	<select id="selectProject" parameterType="kr.or.ddit.projects.project.vo.ProjectVO" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		SELECT PROJECT_MANAGER 
			 , PRO_MEMCOUNT
		     , PRO_ID 
		     , PRO_NAME
		     , PRO_CONTENT
		     , PRO_SHOW
		     , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE
		     , TO_CHAR(MODIFY_DATE, 'YYYY-MM-DD') MODIFY_DATE
		     , TO_CHAR(END_DATE, 'YYYY-MM-DD') END_DATE
		     , GROUP_CODE
		     , CODE
		     , PRO_PARENT
		  FROM PROJECT
		 WHERE PRO_ID = #{proId}
	</select>
	
	<!-- 요청된 프로젝트 목록 조회 -->
	<resultMap type="kr.or.ddit.projects.project.vo.ProjectVO" id="projectMap" autoMapping="true">
		<id property="proId" column="PRO_ID"/>
		<collection property="proMemberList" javaType="java.util.List" ofType="kr.or.ddit.projects.member.vo.ProMemberVO" autoMapping="true">
		</collection>
	</resultMap>
	<select id="selectRequestProjectList" resultMap="projectMap">
		SELECT P.PRO_ID
			 , P.PRO_NAME
			 , P.PRO_CONTENT
		     , TO_CHAR(P.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE
		     , P.PRO_PARENT
		     , P.PROJECT_MANAGER
		     , P.PRO_REQUESTER
		     , P.PRO_MEMCOUNT
		     
		     , B.MEM_ID
		     , B.AUTHORITY
		     
		     , M.MEM_IMG
		     , M.MEM_NAME
		  FROM PROJECT P LEFT OUTER JOIN PROJECT_MEMBER B ON (P.PRO_ID = B.PRO_ID)
		                 LEFT OUTER JOIN MEMBER M ON (B.MEM_ID = M.MEM_ID)
		 WHERE P.CODE = 1
		ORDER BY P.PRO_ID
	</select>	

	<sql id="codeFrag">
		<if test="searchDetail != null and searchDetail.code gt 1">
			AND C.CODE = ${searchDetail.code}
		</if>
	</sql>
	
	<select id="selectHierarchyProjectList" parameterType="kr.or.ddit.vo.PagingVO" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		WITH WORK_CNT AS (
		    SELECT PROJECT.PRO_ID, COUNT(WORK_ID) WORK_CNT, TRUNC(SUM(PROGRESS)/COUNT(WORK_ID)) PROGRESS
		      FROM PROJECT LEFT OUTER JOIN BOARD ON (PROJECT.PRO_ID = BOARD.PRO_ID)
		                   LEFT OUTER JOIN WORK ON (WORK.WORK_ID = BOARD.BOARD_NO)
		  GROUP BY PROJECT.PRO_ID
		)
		, ISSUE_CNT AS (
		    SELECT PROJECT.PRO_ID, COUNT(ISSUE_ID) ISSUE_CNT
		      FROM PROJECT LEFT OUTER JOIN BOARD ON (PROJECT.PRO_ID = BOARD.PRO_ID)
		                   LEFT OUTER JOIN ISSUE ON (ISSUE.ISSUE_ID = BOARD.BOARD_NO)
		    GROUP BY PROJECT.PRO_ID
		)
		<![CDATA[
		SELECT P.PRO_ID
		     , DECODE(LEVEL, 1, '', LPAD('└>', 6*2*(LEVEL-1)+2, '&nbsp;'))||P.PRO_NAME PRO_NAME
		     , P.PRO_CONTENT
		     , TO_CHAR(P.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE
		     , TO_CHAR(P.END_DATE, 'YYYY-MM-DD') END_DATE
		     , P.CODE
		     , P.PRO_PARENT
		     , P.PROJECT_MANAGER
		     , C.CODE_NAME
		     , W.PROGRESS
		     , W.WORK_CNT
		     , I.ISSUE_CNT
		  FROM PROJECT P INNER JOIN CODE C ON (P.CODE = C.CODE AND P.GROUP_CODE = C.GROUP_CODE) 
		                 LEFT OUTER JOIN WORK_CNT W ON (P.PRO_ID = W.PRO_ID)
		                 LEFT OUTER JOIN ISSUE_CNT I ON (P.PRO_ID = I.PRO_ID)
		 ]]>
		 WHERE C.CODE != 1
		 <include refid="codeFrag"></include>
		 START WITH P.PRO_PARENT IS NULL
		 CONNECT BY PRIOR P.PRO_ID = P.PRO_PARENT
		 <include refid="dateSortFrag"></include>
	</select>

	<select id="selectProjectListForMain" parameterType="kr.or.ddit.projects.project.vo.ProjectVO" resultMap="projectMap">
		SELECT A.*
		  FROM(
			SELECT PROJECT_MANAGER
				 , PRO_MEMCOUNT
				 , PRO_ID
				 , PRO_NAME
				 , PRO_CONTENT
				 , TO_CHAR(PROJECT.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE
				 , TO_CHAR(PROJECT.END_DATE, 'YYYY-MM-DD') END_DATE
				 
				 , MEMBER.MEM_IMG
				 , MEMBER.MEM_ID
				 , MEMBER.MEM_NAME
				 
				 , ROWNUM RNUM
			  FROM PROJECT LEFT OUTER JOIN MEMBER ON (PROJECT.PROJECT_MANAGER = MEMBER.MEM_ID)
			 WHERE CODE = 2
		  ORDER BY PROJECT.CREATE_DATE DESC
		  ) A
	  <![CDATA[WHERE RNUM < 6]]>
	</select>	

	<!-- 회원 마이페이지에 표시되는 프로젝트 (내 소속 프로젝트, 진행 또는 정지 프로젝트만 조회) -->
	<select id="selectProjectListByMember" parameterType="kr.or.ddit.projects.member.vo.MemberVO" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		WITH PROJECT_VIEW AS (
		    SELECT PRO_ID
		      FROM PROJECT_MEMBER
		     WHERE MEM_ID = #{memId}
		)
		SELECT P.PRO_ID
		     , P.PRO_NAME
		     , TO_CHAR(P.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE
		     , TO_CHAR(P.MODIFY_DATE, 'YYYY-MM-DD') MODIFY_DATE
		     , TO_CHAR(P.END_DATE, 'YYYY-MM-DD') END_DATE
		     , C.GROUP_CODE
		     , C.CODE
		     , P.PROJECT_MANAGER
		     , C.CODE_NAME
		  FROM PROJECT P INNER JOIN PROJECT_VIEW PV ON (P.PRO_ID = PV.PRO_ID)
		                 INNER JOIN CODE C ON (P.CODE = C.CODE AND P.GROUP_CODE = C.GROUP_CODE)
		 WHERE C.CODE IN (2, 3)
	</select>

	<!-- 프로젝트 소속 구성원을 가져옴 -->
	<select id="selectProjectMemberList" parameterType="kr.or.ddit.projects.project.vo.ProjectVO" resultType="kr.or.ddit.projects.member.vo.ProMemberVO">
	    SELECT M.MEM_NAME
	         , M.MEM_IMG
	         , PM.AUTHORITY
	         , PM.MEM_ID
	         , AUTH.ROLE_NAME
	         , P.PRO_ID
	      FROM PROJECT_MEMBER PM INNER JOIN MEMBER M ON (PM.MEM_ID = M.MEM_ID)
	                             INNER JOIN PROJECT P ON (PM.PRO_ID = P.PRO_ID)
	                             LEFT OUTER JOIN (SELECT AUTHORITY, ROLE_NAME
	                                                FROM ROLES
	                                               WHERE SUBSTR(AUTHORITY, 1, INSTR(AUTHORITY, '_') - 1) = 'ROLE') AUTH ON (PM.AUTHORITY = AUTH.AUTHORITY)
	     WHERE P.PRO_ID = #{proId}
	</select>
	
	<select id="selectProjectMemberRoleNameList" parameterType="kr.or.ddit.projects.project.vo.ProjectVO" resultType="kr.or.ddit.projects.member.vo.ProMemberVO">
		SELECT PM.AUTHORITY
			 , R.ROLE_NAME
			 , COUNT(*) ROLE_CNT
		  FROM PROJECT_MEMBER PM INNER JOIN ROLES R ON (PM.AUTHORITY = R.AUTHORITY)
		 WHERE PM.PRO_ID = #{proId}
	  GROUP BY PM.AUTHORITY, R.ROLE_NAME
	</select>
	
	<update id="updateProject" parameterType="kr.or.ddit.projects.project.vo.ProjectVO">
		UPDATE PROJECT
		   SET CODE = #{code}
		     , MODIFY_DATE = SYSDATE
		 WHERE PRO_ID = #{proId}
	</update>
	
	<delete id="deleteProject" parameterType="kr.or.ddit.projects.project.vo.ProjectVO">
		DELETE
		  FROM PROJECT
		 WHERE PRO_ID = #{proId}
	</delete>
	
	<insert id="insertProject" parameterType="kr.or.ddit.projects.project.vo.ProjectVO">
		<selectKey keyProperty="proId" keyColumn="PRO_ID" order="BEFORE" resultType="String">
			SELECT 'p-'||LPAD(TO_NUMBER(NVL(SUBSTR(MAX(PRO_ID), 3), '0')) + 1, 5, '0')
			  FROM PROJECT
		</selectKey>
		INSERT INTO PROJECT (
		    PROJECT_MANAGER
		    , PRO_REQUESTER
		    , PRO_MEMCOUNT
		    , PRO_ID
		    , PRO_NAME
		    , PRO_CONTENT
		    , PRO_SHOW
		    , CREATE_DATE
		    , GROUP_CODE
		    , CODE
		    , PRO_PARENT
		) VALUES ( 
		    #{projectManager, jdbcType=VARCHAR}
		    , #{proRequester, jdbcType=VARCHAR}
		    , #{proMemcount, jdbcType=NUMERIC}
		    , #{proId, jdbcType=VARCHAR}
		    , #{proName, jdbcType=VARCHAR}
		    , #{proContent, jdbcType=CLOB}
		    , 'Y'
		    , SYSDATE
		    , 'P'
		    , 1
		    , #{proParent, jdbcType=VARCHAR}
		)
	</insert>
	
	<select id="selectProjectListByState" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		SELECT C.CODE_NAME
		     , COUNT(*) PRO_CNT
		  FROM PROJECT P RIGHT OUTER JOIN CODE C ON (P.CODE = C.CODE AND P.GROUP_CODE = C.GROUP_CODE)
		 WHERE C.GROUP_CODE = 'P'
		GROUP BY C.CODE_NAME
	</select>
	
</mapper>








