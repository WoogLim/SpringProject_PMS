package kr.or.ddit.projects.scm.dao.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;
import org.tmatesoft.svn.core.ISVNLogEntryHandler;
import org.tmatesoft.svn.core.SVNException;
import org.tmatesoft.svn.core.SVNLogEntry;
import org.tmatesoft.svn.core.SVNURL;
import org.tmatesoft.svn.core.auth.BasicAuthenticationManager;
import org.tmatesoft.svn.core.internal.io.dav.DAVRepository;
import org.tmatesoft.svn.core.internal.io.dav.DAVRepositoryFactory;

import kr.or.ddit.projects.scm.dao.SvnDAO;
import kr.or.ddit.projects.scm.vo.ScmVO;
import kr.or.ddit.vo.PagingVO;

/**
 * @author 전수빈
 * @since 2021. 3. 3.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2021. 3. 3.      작성자명       최초작성
 * Copyright (c) 2021 by DDIT All right reserved
 * </pre>
 */
@Repository
public class SvnDAOImpl implements SvnDAO{
	
	// svn log start revision default 
	private static final long STARTREVISION = 0;
	// svn log end revision default
	private static final long ENDREVISION = -1;
	
	private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	
	private long totalRecord;
	
	// 테스트를 위한 기본 정보
	private void settingTestUserInfo(ScmVO scmVO){
		String scmUrl = "http://112.220.114.130:10001/svn/projects/202007F/team1/source/bpms";
		String scmId = "202007_JSB";
		String scmPass = "java";

		scmVO.setScmId(scmId);
		scmVO.setScmPass(scmPass);
		scmVO.setScmUrl(scmUrl);
	}
	
	@Override
	public List<ScmVO>selectSvnLogList(PagingVO<ScmVO> pagingVO) throws SVNException, ParseException {
		ScmVO scmVO = pagingVO.getSearchDetail();
		// 지율 예정
		settingTestUserInfo(scmVO);
		////////////////////////////////////
		DAVRepository svnRepo = getConnectDAVRepository(scmVO);
		
		int currentPage = pagingVO.getCurrentPage();
		int screenSize = pagingVO.getScreenSize();
		
		long endRevision = scmVO.getStartRowRevisionList().get(currentPage - 1);
		
		List<ScmVO> logList = new ArrayList<>();
		// 없는 기록이면 null이 아니라 svnException 발생
		// startRevision과 endRevision을 반대로 두면 내림차순 정렬
		String userFilter = scmVO.getAuthor();
		try {
			svnRepo.log(new String[] { "" }, endRevision, STARTREVISION, false, false, screenSize, new ISVNLogEntryHandler() {
				@Override
				public void handleLogEntry(SVNLogEntry logEntry) throws SVNException {
					boolean userCheck = true;
					// 유저별 조회를 위한 필터 기능
					if(StringUtils.isNotBlank(userFilter) && !logEntry.getAuthor().equals(userFilter)) {
						userCheck = false;
					}
					if(userCheck) {
						ScmVO scmVO = new ScmVO();
						scmVO.setRevision(logEntry.getRevision());
						scmVO.setAuthor(logEntry.getAuthor());
						scmVO.setMessage(logEntry.getMessage());
						scmVO.setDate(logEntry.getDate());
						logList.add(scmVO);
					}
				}
			});
		}catch(SVNException e) {
			
		}
		return logList;
	}
	
	@Override
	public List<Long> selectStartRowRevisionList(PagingVO<ScmVO> pagingVO) throws SVNException {
		ScmVO scmVO = pagingVO.getSearchDetail();
		
		// 지율 예정
		settingTestUserInfo(scmVO);
		////////////////////////////////////
		DAVRepository svnRepo = getConnectDAVRepository(scmVO);
		
		long startRevision = STARTREVISION;
		long endRevision = ENDREVISION;
		
		Date startDate = scmVO.getStartRevisionDate();
		Date endDate = scmVO.getEndRevisionDate();
		// 날짜 조건
		if(startDate != null) {
			startRevision = svnRepo.getDatedRevision(startDate);
		}
		if(endDate != null) {
			endRevision = svnRepo.getDatedRevision(endDate);
		}
		
		int screenSize = pagingVO.getScreenSize();
		
		List<Long> logList = new ArrayList<>();
		// 없는 기록이면 null이 아니라 svnException 발생
		// startRevision과 endRevision을 반대로 두면 내림차순 정렬
		String userFilter = scmVO.getAuthor();
		try {
			long totalRecord = svnRepo.log(new String[] { "" }, endRevision, startRevision, false, false, new ISVNLogEntryHandler() {
				int flag = 0;
				@Override
				public void handleLogEntry(SVNLogEntry logEntry) throws SVNException {
					boolean userCheck = true;
					// 유저별 조회를 위한 필터 기능
					if(StringUtils.isNotBlank(userFilter) && !logEntry.getAuthor().equals(userFilter)) {
						userCheck = false;
					}
					if(userCheck) {
						if(flag % screenSize == 0) {
							logList.add(logEntry.getRevision());
							flag = 0;
						}
					}
					flag++;
				}
			});
			setTotalRecord(totalRecord);
		}catch(SVNException e) {
			
		}
		return logList;
	}
	
	private void setTotalRecord(long totalRecord) {
		this.totalRecord = totalRecord;
	}
	
	@Override
	public long getTotalRecord() {
		return this.totalRecord;
	}

	@Override
	public DAVRepository getConnectDAVRepository(ScmVO scmVO) throws SVNException {
		// 지울 예정
		settingTestUserInfo(scmVO);
		////////////////////////////////////
		DAVRepository svnRepo = (DAVRepository) DAVRepositoryFactory.create(SVNURL.parseURIEncoded(scmVO.getScmUrl()));
		svnRepo.setAuthenticationManager(new BasicAuthenticationManager(scmVO.getScmId(), scmVO.getScmPass()));
		return svnRepo;
	}

	@Override
	public Set<String> selectProviderSet(ScmVO scmVO) throws SVNException {
		// 지율 예정
		settingTestUserInfo(scmVO);
		////////////////////////////////////
		DAVRepository svnRepo = getConnectDAVRepository(scmVO);
		
		long startRevision = STARTREVISION;
		long endRevision = ENDREVISION;
		
		Date startDate = scmVO.getStartRevisionDate();
		Date endDate = scmVO.getEndRevisionDate();
		// 날짜 조건
		if(startDate != null) {
			startRevision = svnRepo.getDatedRevision(startDate);
		}
		if(endDate != null) {
			endRevision = svnRepo.getDatedRevision(endDate);
		}
		
		Set<String> providerList = new TreeSet<>();
		// 없는 기록이면 null이 아니라 svnException 발생
		// startRevision과 endRevision을 반대로 두면 내림차순 정렬
		String userFilter = scmVO.getAuthor();
		try {
			svnRepo.log(new String[] { "" }, endRevision, startRevision, false, false, new ISVNLogEntryHandler() {
				@Override
				public void handleLogEntry(SVNLogEntry logEntry) throws SVNException {
					providerList.add(logEntry.getAuthor());
				}
			});
		}catch(SVNException e) {
			
		}
		return providerList;
	}
	
	@Override
	public Map<String, Integer> selectByProviderToChartMap(ScmVO scmVO) throws SVNException {
		// 지율 예정
		settingTestUserInfo(scmVO);
		////////////////////////////////////
		DAVRepository svnRepo = getConnectDAVRepository(scmVO);
		
		long startRevision = STARTREVISION;
		long endRevision = ENDREVISION;
		
		Date startDate = scmVO.getStartRevisionDate();
		Date endDate = scmVO.getEndRevisionDate();
		// 날짜 조건
		if(startDate != null) {
			startRevision = svnRepo.getDatedRevision(startDate);
		}
		if(endDate != null) {
			endRevision = svnRepo.getDatedRevision(endDate);
		}
		
		Map<String, Integer> userByCommitCount = new TreeMap<>();
		// 없는 기록이면 null이 아니라 svnException 발생
		// startRevision과 endRevision을 반대로 두면 내림차순 정렬
		String userFilter = scmVO.getAuthor();
		try {
			svnRepo.log(new String[] { "" }, endRevision, startRevision, false, false, new ISVNLogEntryHandler() {
				@Override
				public void handleLogEntry(SVNLogEntry logEntry) throws SVNException {
					String author = logEntry.getAuthor();
					// 저자별 커밋
					Integer commitCnt = userByCommitCount.get(author);
					commitCnt = (commitCnt != null) ? commitCnt+1 : 1;
					userByCommitCount.put(author, commitCnt);
				}
			});
		}catch(SVNException e) {
			
		}
		return userByCommitCount;
	}

	@Override
	public Map<Integer, Integer> selectByMonthToChartMap(ScmVO scmVO) throws SVNException {
		// 지율 예정
		settingTestUserInfo(scmVO);
		////////////////////////////////////
		DAVRepository svnRepo = getConnectDAVRepository(scmVO);
		
		long startRevision = STARTREVISION;
		long endRevision = ENDREVISION;
		
		Date startDate = scmVO.getStartRevisionDate();
		Date endDate = scmVO.getEndRevisionDate();
		// 날짜 조건
		if(startDate != null) {
			startRevision = svnRepo.getDatedRevision(startDate);
		}
		if(endDate != null) {
			endRevision = svnRepo.getDatedRevision(endDate);
		}
		
		Map<Integer, Integer> monthByCommitCount = new TreeMap<>();
		// 없는 기록이면 null이 아니라 svnException 발생
		// startRevision과 endRevision을 반대로 두면 내림차순 정렬
		String userFilter = scmVO.getAuthor();
		try {
			svnRepo.log(new String[] { "" }, endRevision, startRevision, false, false, new ISVNLogEntryHandler() {
				@Override
				public void handleLogEntry(SVNLogEntry logEntry) throws SVNException {
					Date date = logEntry.getDate();
					// month의 1월의 값은 0부터 시작
					int month = date.getMonth() + 1;
					Integer commitCnt = monthByCommitCount.get(month);
					commitCnt = (commitCnt != null) ? commitCnt+1 : 1;
					monthByCommitCount.put(month, commitCnt);
				}
			});
		}catch(SVNException e) {
			
		}
		return monthByCommitCount;
	}

}
