<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

<!-- 인증: AuthenticationManager -->
<!-- 인가: AccessDecisionVoter -->

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.crypto.factory.PasswordEncoderFactories"
		factory-method="createDelegatingPasswordEncoder"
	/>

	<beans:bean id="authenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"
		p:userDetailsService-ref="customUserService"
		p:passwordEncoder-ref="passwordEncoder"
		p:hideUserNotFoundExceptions="false" />

	<authentication-manager id="authenticationManager">
		<authentication-provider ref="authenticationProvider"/>
	</authentication-manager>

	<beans:bean id="customAuthenticationSuccessHandler"
		class="kr.or.ddit.security.CustomAuthenticationSuccessHandler"
		p:defaultTargetUrl="/login/loginForm.do"
		p:alwaysUseDefaultTargetUrl="true" 
	/>

	<beans:bean id="grantedAuthorityDefaults" class="org.springframework.security.config.core.GrantedAuthorityDefaults"
		c:rolePrefix=""
	/>

	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.ConsensusBased"
		p:allowIfAllAbstainDecisions="false"
		p:messageSource-ref="securityMessageSource"
	>
		<beans:constructor-arg name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
				<beans:bean class="kr.or.ddit.security.voter.CustomRoleHierarchyVoter"
					p:rolePrefix="#{grantedAuthorityDefaults.rolePrefix}"
				>
					<beans:constructor-arg name="roleHierarchy">
						<beans:bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
							<beans:property name="hierarchy">
								<beans:bean class="kr.or.ddit.security.auth.RoleHierarchyStringFactoryBean"/>
							</beans:property>
						</beans:bean>
					</beans:constructor-arg>
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
		
	</beans:bean>
	
	<!-- 
	접근권한을 처리할 때 계속해서 DB에 접근하는하면 안됨 (사용자 요청을 무한대로 늘어날 수 있음) 
	Map을 사용하여 접근권한을 In Memory방식으로 관리함
	-->
	<beans:bean id="requestMap" class="kr.or.ddit.security.auth.RequestMapFactoryBean" />
	
	<!-- 
	접근권한에 대한 수정사항이 발생하면 requestMap을 초기화하고 다시 setting함
	 -->
	<beans:bean id="filterInvocationSecurityMetadataSource" class="kr.or.ddit.security.auth.ReloadableFilterInvocationSecurityMetadataSource" 
		c:requestMap-ref="requestMap"
	/>
	
	<!-- Filter interceptor -->
	<beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" 
		p:authenticationManager-ref="authenticationManager"
		p:accessDecisionManager-ref="accessDecisionManager"
		p:securityMetadataSource-ref="filterInvocationSecurityMetadataSource"
		p:messageSource-ref="securityMessageSource"
	/>
	
	<!-- 사용자가 URI에 대한 접근권한이 있는지 판단함 -->
	<beans:bean id="webInvocationPrivilegeEvaluator" class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator" 
		c:securityInterceptor-ref="filterSecurityInterceptor"
	/>
	
	<beans:bean id="securityMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource" 
		p:basenames="org.springframework.security.messages"
	/>
	
	<beans:bean id="messageSourceAccessor" class="org.springframework.context.support.MessageSourceAccessor" 
		c:messageSource-ref="securityMessageSource"
	/>
	
	<http pattern="/**/*.js" security="none"/>
	<http pattern="/**/*.css" security="none"/>
	<http pattern="/**/*.html" security="none"/>
	<http pattern="/assets/**" security="none"/>
	<http 
		auto-config="true"
		authentication-manager-ref="authenticationManager"
		access-decision-manager-ref="accessDecisionManager"
		use-expressions="true"
	>
		<form-login login-page="/login/loginForm.do"
			username-parameter="memId" password-parameter="memPass"
			login-processing-url="/login/loginProcess.do"
			authentication-success-handler-ref="customAuthenticationSuccessHandler"/>

		<anonymous enabled="true" username="anonymous" />

		<logout logout-url="/login/logout.do" invalidate-session="true" logout-success-url="/login/loginForm.do" />

		<csrf disabled="true" />

		<remember-me remember-me-parameter="rememberMe"
			remember-me-cookie="rememberMeCookie"
			data-source-ref="dataSource"
			user-service-ref="customUserService"/>
		
		<access-denied-handler error-page="/"/>
		<custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>

	<global-method-security
		pre-post-annotations="enabled" />
</beans:beans>
















