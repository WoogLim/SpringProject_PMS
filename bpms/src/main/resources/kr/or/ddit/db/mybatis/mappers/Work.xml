<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.projects.work.dao.WorkDAO">

	<!-- 일감 필터 타입 -->
	<sql id="workFilter">
			<if test="searchDetail.filterList!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.filterList)">
				<!-- 레프트 메뉴 left menu 개편 이후 안씀-->
				<choose>
					<when test="'mine'.equals(searchDetail.filterList)">
						AND W.WORK_DIRECTOR = #{memId}
					</when>
					<when test="'resolved'.equals(searchDetail.filterList)">
						AND W.WORK_STATE = '완료'
					</when>
					<when test="'unResolved'.equals(searchDetail.filterList)">
						AND W.WORK_STATE != '완료'
					</when>
				</choose>
			</if>
			<!-- 프로젝트 선택 후 일감 목록 조회 시 -->
			<if test="searchDetail.proId !=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.proId)">
				AND B.PRO_ID = #{searchDetail.proId}
			</if>
			<!-- 프로젝트별 -->
			<if test="searchDetail.filterProject !=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.filterProject)">
				AND B.PRO_ID = #{searchDetail.filterProject}
			</if>
			<!-- 이슈 우선 순위 -->
			<if test="searchDetail.workRank !=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.workRank)">
				AND W.WORK_RANK = #{searchDetail.workRank}
			</if>
			<!-- 이슈 유형 -->
			<if test="searchDetail.workType !=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.workType)">
				AND W.WORK_TYPE = #{searchDetail.workType}
			</if>
			<!-- 이슈 상태 -->
			<if test="searchDetail.workState !=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.workState)">
				AND W.WORK_STATE = #{searchDetail.workState}
			</if>
			<!-- 아이디 정렬 -->
			<choose>
				<when test="'ASC'.equals(searchDetail.sort)">
					ORDER BY W.WORK_ID ASC
				</when>
				<otherwise>
					ORDER BY W.WORK_ID DESC
				</otherwise>
			</choose>
	</sql>
	<!-- 토탈 레코드 조회 -->
	<select id="selectWorkListCount" parameterType="kr.or.ddit.vo.PagingVO" resultType="int">
		SELECT COUNT(*)
		FROM PROJECT P LEFT OUTER JOIN PROJECT_MEMBER PM ON (P.PRO_ID = PM.PRO_ID)
             LEFT OUTER JOIN MEMBER M ON (PM.MEM_ID = M.MEM_ID)
             LEFT OUTER JOIN BOARD B ON (P.PRO_ID = B.PRO_ID)
             INNER JOIN WORK W ON (B.BOARD_NO = W.WORK_ID)
        WHERE B.BOARD_NO = W.WORK_ID
        AND M.MEM_ID = #{memId}
		<include refid="workFilter"></include>
	</select>
	
	<!-- 회원별 일감 리스트 조회 -->
	<select id="selectByMemberToWorkList" parameterType="kr.or.ddit.vo.PagingVO" resultType="kr.or.ddit.projects.work.vo.WorkVO">
		SELECT RES.*
		FROM (
			SELECT 
				A.*, ROWNUM RNUM
			FROM(
				SELECT
					W.WORK_ID
				    ,W.WORK_RANK
				    ,W.WORK_TYPE	
				    ,W.WORK_STATE
				    ,W.WORK_SHOW
				    ,TO_CHAR(W.START_DATE, 'YYYY-MM-DD') START_DATE
				    ,TO_CHAR(W.END_DATE, 'YYYY-MM-DD') END_DATE
				    ,TRIM(W.PROGRESS) PROGRESS
				    ,W.WORK_DIRECTOR
				    ,W.WORK_PARENT
				    ,B.BOARD_NO 
				    ,B.BOARD_TITLE
				    ,B.BOARD_CONTENT
				    ,B.BOARD_WRITER   	
				    ,B.BOARD_SHOW
				    ,B.CREATE_DATE
				    ,B.MODIFY_DATE
				    ,B.PRO_ID
				    ,B.GROUP_CODE
				    ,B.CODE
				    ,P.PRO_NAME
				FROM PROJECT P LEFT OUTER JOIN PROJECT_MEMBER PM ON (P.PRO_ID = PM.PRO_ID)
		             LEFT OUTER JOIN MEMBER M ON (PM.MEM_ID = M.MEM_ID)
		             LEFT OUTER JOIN BOARD B ON (P.PRO_ID = B.PRO_ID)
		             INNER JOIN WORK W ON (B.BOARD_NO = W.WORK_ID)
		        WHERE B.BOARD_NO = W.WORK_ID
		        AND M.MEM_ID = #{memId}
				<include refid="workFilter"></include>
			)A
		)RES
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<resultMap type="kr.or.ddit.projects.work.vo.WorkVO" id="workMap" autoMapping="true">
		<id property="workId" column="WORK_ID"/>
		<collection property="attatchList" ofType="kr.or.ddit.projects.file.vo.AttatchVO" autoMapping="false">
			<id property="attNo" column="ATT_NO"/>
			<id property="attOriginname" column="ATT_ORIGINNAME"/>
			<id property="attSavename" column="ATT_SAVENAME"/>
			<id property="attMime" column="ATT_MIME"/>
			<id property="attFilesize" column="ATT_FILESIZE"/>
			<id property="attFancy" column="ATT_FANCY"/>
			<id property="attDowncount" column="ATT_DOWNCOUNT"/>
		</collection>
		<collection property="replyList" ofType="kr.or.ddit.projects.reply.vo.ReplyVO" autoMapping="true">
			<id property="replyNo" column="REPLY_NO"/>
			<id property="replyTitle" column="REPLY_TITLE"/>
			<id property="replyContent" column="REPLY_CONTENT"/>
			<id property="replyPass" column="REPLY_PASS"/>
			<id property="replyWriter" column="REPLY_WRITER"/>
			<id property="createDate" column="CREATE_DATE"/>
			<id property="modifyDate" column="MODIFY_DATE"/>
			<id property="replyParent" column="REPLY_PARENT"/>
		</collection>
	</resultMap>
	
	<!-- 일감 상세 조회 -->
	<select id="selectWork" parameterType="kr.or.ddit.projects.work.vo.WorkVO" resultMap="workMap">
		SELECT
			W.WORK_ID
	       	,W.WORK_RANK
	       	,W.WORK_TYPE	
	       	,W.WORK_STATE
	       	,W.WORK_SHOW
	       	,TO_CHAR(W.START_DATE, 'YYYY-MM-DD') START_DATE
	       	,TO_CHAR(W.END_DATE, 'YYYY-MM-DD') END_DATE
	       	,TRIM(W.PROGRESS) PROGRESS
	       	,W.WORK_DIRECTOR
			,W.WORK_PARENT
			,B.BOARD_NO 
			,B.BOARD_TITLE
			,B.BOARD_CONTENT
			,B.BOARD_WRITER   	
			,B.BOARD_SHOW
			,B.CREATE_DATE
			,TO_CHAR(B.MODIFY_DATE, 'YYYY.MM.DD. AM HH:MI.') MODIFY_DATE
 			,B.PRO_ID
 			,B.GROUP_CODE
 			,B.CODE
 			,A.ATT_NO    
		   	,A.ATT_ORIGINNAME    
		    ,A.ATT_SAVENAME
		    ,A.ATT_MIME
		    ,A.ATT_FILESIZE    
		    ,A.ATT_FANCY
		   	,A.ATT_DOWNCOUNT
		    ,R.REPLY_NO
		    ,R.REPLY_WRITER
		    ,R.CREATE_DATE
		    ,R.REPLY_CONTENT
		FROM  BOARD B LEFT OUTER JOIN ATTATCH A ON (B.BOARD_NO = A.BOARD_NO)
              LEFT OUTER JOIN REPLY R ON (B.BOARD_NO = R.BOARD_NO)
              INNER JOIN WORK W ON (B.BOARD_NO = W.WORK_ID) 
        WHERE B.BOARD_NO = W.WORK_ID
        AND W.WORK_ID = #{workId} 
	</select>
	
	<select id="selectByMemberToProjectList" parameterType="kr.or.ddit.projects.member.vo.MemberVO" resultType="kr.or.ddit.projects.project.vo.ProjectVO">
		SELECT P.*
		FROM PROJECT P, PROJECT_MEMBER PM, MEMBER M
		WHERE P.PRO_ID = PM.PRO_ID
		AND PM.MEM_ID = M.MEM_ID
		AND M.MEM_ID = #{memId} 
	</select>

	<select id="selectByProjectToMemberList" parameterType="kr.or.ddit.projects.work.vo.WorkVO" resultType="kr.or.ddit.projects.member.vo.MemberVO">
		SELECT M.*
		FROM PROJECT P, PROJECT_MEMBER PM, MEMBER M
		WHERE P.PRO_ID = PM.PRO_ID
		AND PM.MEM_ID = M.MEM_ID
		AND P.PRO_ID = #{proId}
	</select>
	
	<select id="parenthWorkCheck" parameterType="kr.or.ddit.projects.work.vo.WorkVO" resultType="kr.or.ddit.projects.work.vo.WorkVO">
		SELECT *
		FROM BOARD B INNER JOIN WORK W ON (B.BOARD_NO = W.WORK_ID) 
		WHERE W.WORK_ID = #{workParent}
		AND B.PRO_ID = #{proId}
		<if test="workId != null">
			AND W.WORK_ID != #{workId}
		</if>
	</select>

	<insert id="insertWork" parameterType="kr.or.ddit.projects.work.vo.WorkVO">
		INSERT INTO WORK (
		    WORK_ID
		    ,WORK_RANK
		    ,WORK_TYPE
		    ,WORK_STATE
		    ,WORK_SHOW
		    ,START_DATE
		    ,END_DATE
		    ,PROGRESS
		    ,WORK_DIRECTOR
		    ,WORK_PARENT
		) VALUES (
			#{boardNo, jdbcType=NUMERIC}
			,#{workRank, jdbcType=VARCHAR}
			,#{workType, jdbcType=VARCHAR}
			,#{workState, jdbcType=VARCHAR}
			,#{workShow, jdbcType=CHAR}
			,#{startDate}
			,#{endDate}
			,#{progress, jdbcType=CHAR}
			,#{workDirector, jdbcType=VARCHAR}
			,#{workParent, jdbcType=NUMERIC}
		)
	</insert>
	
	<update id="updateWork" parameterType="kr.or.ddit.projects.work.vo.WorkVO">
		UPDATE WORK
		SET
		    WORK_RANK     = #{workRank, jdbcType=VARCHAR}          
		    ,WORK_TYPE     = #{workType, jdbcType=VARCHAR}    
		    ,WORK_STATE    = #{workState, jdbcType=VARCHAR}       
		    ,WORK_SHOW     = #{workShow, jdbcType=CHAR}   
		    ,START_DATE    = #{startDate}       
		    ,MODIFY_DATE   = SYSDATE
		    ,END_DATE      = #{endDate}     
		    ,PROGRESS      = #{progress, jdbcType=CHAR}       
		    ,WORK_DIRECTOR = #{workDirector, jdbcType=VARCHAR}
		    ,WORK_PARENT   = #{workParent, jdbcType=NUMERIC}  
		WHERE
			WORK_ID = #{workId}
	</update>
	
	<!-- CACADE 적용 BOARD 행과 관련된 데이터 모두 삭제 -->
	<delete id="deleteWork" parameterType="kr.or.ddit.projects.work.vo.WorkVO">
		DELETE FROM BOARD WHERE BOARD_NO = #{workId} 
	</delete>
	
	<select id="selectCompleteWorkListInMonth" parameterType="kr.or.ddit.projects.project.vo.ProjectVO" resultType="kr.or.ddit.projects.work.vo.WorkVO">
		WITH STATE AS (
		    SELECT TEXT
		    FROM CUSTOM_INFO
		    WHERE GROUP_CODE = 'WS'
		    AND TEXT = '완료'
		)
		SELECT TO_CHAR(BB.DT, 'YYYY-MM-DD') MODIFY_DATE
		     , NVL(SUM(AA.TMP_CNT), 0) COMPLETE_WORK_CNT
		  FROM (
		            SELECT TO_CHAR(B.MODIFY_DATE, 'YYYY-MM-DD') AS MODIFY_DATE
		            	 , COUNT(*) TMP_CNT
		              FROM WORK W INNER JOIN BOARD B ON (W.WORK_ID = B.BOARD_NO)
		            			  INNER JOIN STATE S ON (S.TEXT = W.WORK_STATE)
		            WHERE B.PRO_ID = #{proId}
		              AND W.PROGRESS = 100
		              AND B.MODIFY_DATE BETWEEN TRUNC(SYSDATE, 'MM')
		              						AND LAST_DAY(SYSDATE)
		            GROUP BY B.MODIFY_DATE, WORK_STATE
		            ORDER BY END_DATE
		        ) AA    
		        RIGHT OUTER JOIN 
		        (
		            SELECT TRUNC(SYSDATE, 'MM') + LEVEL - 1 AS DT
		            FROM DUAL 
		            CONNECT BY LEVEL <![CDATA[<=]]> LAST_DAY(SYSDATE) - TRUNC(SYSDATE, 'MM') + 1
		        ) BB ON (AA.MODIFY_DATE = BB.DT)
		GROUP BY BB.DT, MODIFY_DATE
		ORDER BY BB.DT
	</select>
	
	<select id="selectByProjectToWorkList" parameterType="kr.or.ddit.projects.work.vo.WorkVO" resultType="kr.or.ddit.projects.work.vo.WorkVO">
		SELECT
			W.WORK_ID
		    ,W.WORK_RANK
		    ,W.WORK_TYPE	
		    ,W.WORK_STATE
		    ,W.WORK_SHOW
		    ,TO_CHAR(W.START_DATE, 'YYYY-MM-DD') START_DATE
		    ,TO_CHAR(W.END_DATE, 'YYYY-MM-DD') END_DATE
		    ,TRIM(W.PROGRESS) PROGRESS
		    ,W.WORK_DIRECTOR
		    ,W.WORK_PARENT
		    ,B.BOARD_NO 
		    ,B.BOARD_TITLE
		    ,B.BOARD_CONTENT
		    ,B.BOARD_WRITER   	
		    ,B.BOARD_SHOW
		    ,B.CREATE_DATE
		    ,B.MODIFY_DATE
		    ,B.PRO_ID
		    ,B.GROUP_CODE
		    ,B.CODE
		    ,P.PRO_NAME
		FROM PROJECT P INNER JOIN BOARD B ON (P.PRO_ID = B.PRO_ID)
		     INNER JOIN WORK W ON (B.BOARD_NO = W.WORK_ID)
		WHERE P.PRO_ID = #{proId}
		<if test="parentSearch != null and @org.apache.commons.lang3.StringUtils@isNotBlank(parentSearch)">
			AND (W.WORK_ID LIKE '%'||#{parentSearch}||'%' OR B.BOARD_TITLE LIKE '%'||#{parentSearch}||'%')
		</if>
	</select>
</mapper>